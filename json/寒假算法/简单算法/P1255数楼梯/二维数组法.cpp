/*题目描述
楼梯有 N 阶，上楼可以一步上一阶，也可以一步上二阶。

输入格式
一个数字，楼梯数。

输出格式
输出走的方式总数。

对于 100\%100% 的数据，N≤5000*/
/*思路：对于某一格楼梯来说，这阶楼梯的走法就相当于前
一阶楼梯的走法加上前前阶楼梯的走法，故这里采用斐波那契
数列解题。又由于这里的数据有可能会爆，所以得用高精*/

/*这里如果采用的是二维数组的话，那么就相当于是第一个
变量定义列，也就是定义的是第几阶台阶，然后第二个变量
定义行，第一行就是个位，第二行就是十位，……以此类推
到时候输出的时候需要从最后一位逆序输出*/

#include<iostream>
#include<cstdio>
#include<cstring>

using namespace std;
int n, len = 1, f[5003][5003];
void fun(int k)
{
    int i;
    for (i = 1; i <= len; ++i)
    {
        f[k][i] = f[k - 1][i] + f[k - 2][i];
    }
    for (i = 1; i <= len; ++i)
    {
        if (f[k][i] > 10)
        {
            f[k][i + 1] += f[k][i] / 10;
            f[k][i] %= 10;
            if(f[k][len+1])
                len++;
        }
    }
}
int main()
{
    int i;
    cin >> n;
    f[1][1] = 1, f[2][1] = 2;
    for (int i = 3; i <= n; i++)
    {
        fun(i);
    }
    for (i = len; i >= 1; --i)
    {
        cout << f[n][i];
    }
    return 0;
}